// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `platon_mpc_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __platon_mpc_service_h__
#define __platon_mpc_service_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace platon
{

namespace callback
{

class TaskCallback;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::platon::callback::TaskCallback>&);
::IceProxy::Ice::Object* upCast(::IceProxy::platon::callback::TaskCallback*);

class TransactionCallback;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::platon::callback::TransactionCallback>&);
::IceProxy::Ice::Object* upCast(::IceProxy::platon::callback::TransactionCallback*);

class NodeCallback;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::platon::callback::NodeCallback>&);
::IceProxy::Ice::Object* upCast(::IceProxy::platon::callback::NodeCallback*);

}

namespace service
{

class TaskSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::platon::service::TaskSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::platon::service::TaskSession*);

class NodeChannelSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::platon::service::NodeChannelSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::platon::service::NodeChannelSession*);

}

}

}

namespace platon
{

namespace callback
{

class TaskCallback;
::Ice::Object* upCast(::platon::callback::TaskCallback*);
typedef ::IceInternal::Handle< ::platon::callback::TaskCallback> TaskCallbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::platon::callback::TaskCallback> TaskCallbackPrx;
void __patch(TaskCallbackPtr&, const ::Ice::ObjectPtr&);

class TransactionCallback;
::Ice::Object* upCast(::platon::callback::TransactionCallback*);
typedef ::IceInternal::Handle< ::platon::callback::TransactionCallback> TransactionCallbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::platon::callback::TransactionCallback> TransactionCallbackPrx;
void __patch(TransactionCallbackPtr&, const ::Ice::ObjectPtr&);

class NodeCallback;
::Ice::Object* upCast(::platon::callback::NodeCallback*);
typedef ::IceInternal::Handle< ::platon::callback::NodeCallback> NodeCallbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::platon::callback::NodeCallback> NodeCallbackPrx;
void __patch(NodeCallbackPtr&, const ::Ice::ObjectPtr&);

}

namespace service
{

class TaskSession;
::Ice::Object* upCast(::platon::service::TaskSession*);
typedef ::IceInternal::Handle< ::platon::service::TaskSession> TaskSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::platon::service::TaskSession> TaskSessionPrx;
void __patch(TaskSessionPtr&, const ::Ice::ObjectPtr&);

class NodeChannelSession;
::Ice::Object* upCast(::platon::service::NodeChannelSession*);
typedef ::IceInternal::Handle< ::platon::service::NodeChannelSession> NodeChannelSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::platon::service::NodeChannelSession> NodeChannelSessionPrx;
void __patch(NodeChannelSessionPtr&, const ::Ice::ObjectPtr&);

}

}

namespace platon
{

enum ErrorEnum
{
    NoError = 0,
    SystemError = 100,
    ConnectionError = 1001,
    UserPermissionError = 1002,
    TaskNotFound = 1005,
    NoParticipant = 1006,
    SomeOneOffline = 1007,
    SomeOneRejectTask = 1008,
    TaskExecTimeout = 1011,
    TaskInputInvalid = 1012,
    TaskExecError = 1013
};

enum MPCRole
{
    PART_ALICE = 1,
    PART_BOB = 2,
    PART_GREEN = 3,
    PART_NOBODY = 4
};

enum NodeCommunicateMode
{
    MCALLBACK,
    MSERVICE
};

struct NodeCommunicateInfo
{
    ::platon::NodeCommunicateMode mode;
    ::std::string user;
    ::std::string password;
    ::std::string endpoint;
    bool ready;

    bool operator==(const NodeCommunicateInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(mode != __rhs.mode)
        {
            return false;
        }
        if(user != __rhs.user)
        {
            return false;
        }
        if(password != __rhs.password)
        {
            return false;
        }
        if(endpoint != __rhs.endpoint)
        {
            return false;
        }
        if(ready != __rhs.ready)
        {
            return false;
        }
        return true;
    }

    bool operator<(const NodeCommunicateInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(mode < __rhs.mode)
        {
            return true;
        }
        else if(__rhs.mode < mode)
        {
            return false;
        }
        if(user < __rhs.user)
        {
            return true;
        }
        else if(__rhs.user < user)
        {
            return false;
        }
        if(password < __rhs.password)
        {
            return true;
        }
        else if(__rhs.password < password)
        {
            return false;
        }
        if(endpoint < __rhs.endpoint)
        {
            return true;
        }
        else if(__rhs.endpoint < endpoint)
        {
            return false;
        }
        if(ready < __rhs.ready)
        {
            return true;
        }
        else if(__rhs.ready < ready)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const NodeCommunicateInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const NodeCommunicateInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const NodeCommunicateInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const NodeCommunicateInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::platon::NodeCommunicateInfo> NodeCommunicateInfoList;

typedef ::std::vector< ::Ice::Byte> ByteList;

typedef ::std::vector< ::std::string> StringList;

typedef ::std::vector< ::platon::ByteList> ByteLists;

namespace callback
{

struct MpcRequest
{
    ::std::string customer;
    ::std::string task_id;
    ::std::string ir_hash;
    ::std::string method;
    ::platon::MPCRole role;
    ::platon::StringList peers;
    ::Ice::Int index;
};

struct TransactionParams
{
    ::std::string task_id;
    ::Ice::Long gas_price;
    ::Ice::Long gas_limit;
    ::Ice::Long nonce;
    ::std::string to_addr;
    ::platon::ByteList data;
    ::Ice::Int state;
};

}

namespace service
{

struct TaskParams
{
    ::std::string taskid;
    ::std::string pubkey;
    ::std::string txaddr;
    ::std::string iraddr;
    ::std::string method;
    ::std::string extras;
    ::std::string irhash;
    ::platon::MPCRole role;

    bool operator==(const TaskParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(taskid != __rhs.taskid)
        {
            return false;
        }
        if(pubkey != __rhs.pubkey)
        {
            return false;
        }
        if(txaddr != __rhs.txaddr)
        {
            return false;
        }
        if(iraddr != __rhs.iraddr)
        {
            return false;
        }
        if(method != __rhs.method)
        {
            return false;
        }
        if(extras != __rhs.extras)
        {
            return false;
        }
        if(irhash != __rhs.irhash)
        {
            return false;
        }
        if(role != __rhs.role)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TaskParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(taskid < __rhs.taskid)
        {
            return true;
        }
        else if(__rhs.taskid < taskid)
        {
            return false;
        }
        if(pubkey < __rhs.pubkey)
        {
            return true;
        }
        else if(__rhs.pubkey < pubkey)
        {
            return false;
        }
        if(txaddr < __rhs.txaddr)
        {
            return true;
        }
        else if(__rhs.txaddr < txaddr)
        {
            return false;
        }
        if(iraddr < __rhs.iraddr)
        {
            return true;
        }
        else if(__rhs.iraddr < iraddr)
        {
            return false;
        }
        if(method < __rhs.method)
        {
            return true;
        }
        else if(__rhs.method < method)
        {
            return false;
        }
        if(extras < __rhs.extras)
        {
            return true;
        }
        else if(__rhs.extras < extras)
        {
            return false;
        }
        if(irhash < __rhs.irhash)
        {
            return true;
        }
        else if(__rhs.irhash < irhash)
        {
            return false;
        }
        if(role < __rhs.role)
        {
            return true;
        }
        else if(__rhs.role < role)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TaskParams& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TaskParams& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TaskParams& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TaskParams& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

}

namespace Ice
{
template<>
struct StreamableTraits< ::platon::ErrorEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1013;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::platon::MPCRole>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 1;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::platon::NodeCommunicateMode>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::platon::NodeCommunicateInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::platon::NodeCommunicateInfo, S>
{
    static void write(S* __os, const ::platon::NodeCommunicateInfo& v)
    {
        __os->write(v.mode);
        __os->write(v.user);
        __os->write(v.password);
        __os->write(v.endpoint);
        __os->write(v.ready);
    }
};

template<class S>
struct StreamReader< ::platon::NodeCommunicateInfo, S>
{
    static void read(S* __is, ::platon::NodeCommunicateInfo& v)
    {
        __is->read(v.mode);
        __is->read(v.user);
        __is->read(v.password);
        __is->read(v.endpoint);
        __is->read(v.ready);
    }
};

template<>
struct StreamableTraits< ::platon::callback::MpcRequest>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::platon::callback::MpcRequest, S>
{
    static void write(S* __os, const ::platon::callback::MpcRequest& v)
    {
        __os->write(v.customer);
        __os->write(v.task_id);
        __os->write(v.ir_hash);
        __os->write(v.method);
        __os->write(v.role);
        __os->write(v.peers);
        __os->write(v.index);
    }
};

template<class S>
struct StreamReader< ::platon::callback::MpcRequest, S>
{
    static void read(S* __is, ::platon::callback::MpcRequest& v)
    {
        __is->read(v.customer);
        __is->read(v.task_id);
        __is->read(v.ir_hash);
        __is->read(v.method);
        __is->read(v.role);
        __is->read(v.peers);
        __is->read(v.index);
    }
};

template<>
struct StreamableTraits< ::platon::callback::TransactionParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 31;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::platon::callback::TransactionParams, S>
{
    static void write(S* __os, const ::platon::callback::TransactionParams& v)
    {
        __os->write(v.task_id);
        __os->write(v.gas_price);
        __os->write(v.gas_limit);
        __os->write(v.nonce);
        __os->write(v.to_addr);
        __os->write(v.data);
        __os->write(v.state);
    }
};

template<class S>
struct StreamReader< ::platon::callback::TransactionParams, S>
{
    static void read(S* __is, ::platon::callback::TransactionParams& v)
    {
        __is->read(v.task_id);
        __is->read(v.gas_price);
        __is->read(v.gas_limit);
        __is->read(v.nonce);
        __is->read(v.to_addr);
        __is->read(v.data);
        __is->read(v.state);
    }
};

template<>
struct StreamableTraits< ::platon::service::TaskParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::platon::service::TaskParams, S>
{
    static void write(S* __os, const ::platon::service::TaskParams& v)
    {
        __os->write(v.taskid);
        __os->write(v.pubkey);
        __os->write(v.txaddr);
        __os->write(v.iraddr);
        __os->write(v.method);
        __os->write(v.extras);
        __os->write(v.irhash);
        __os->write(v.role);
    }
};

template<class S>
struct StreamReader< ::platon::service::TaskParams, S>
{
    static void read(S* __is, ::platon::service::TaskParams& v)
    {
        __is->read(v.taskid);
        __is->read(v.pubkey);
        __is->read(v.txaddr);
        __is->read(v.iraddr);
        __is->read(v.method);
        __is->read(v.extras);
        __is->read(v.irhash);
        __is->read(v.role);
    }
};

}

namespace platon
{

namespace callback
{

class Callback_TaskCallback_error_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TaskCallback_error_Base> Callback_TaskCallback_errorPtr;

class Callback_TaskCallback_inputData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TaskCallback_inputData_Base> Callback_TaskCallback_inputDataPtr;

class Callback_TaskCallback_result_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TaskCallback_result_Base> Callback_TaskCallback_resultPtr;

class Callback_TransactionCallback_signTransaction_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransactionCallback_signTransaction_Base> Callback_TransactionCallback_signTransactionPtr;

class Callback_TransactionCallback_signTransaction2_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransactionCallback_signTransaction2_Base> Callback_TransactionCallback_signTransaction2Ptr;

class Callback_NodeCallback_invite_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeCallback_invite_Base> Callback_NodeCallback_invitePtr;

class Callback_NodeCallback_notify_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeCallback_notify_Base> Callback_NodeCallback_notifyPtr;

class Callback_NodeCallback_ready_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeCallback_ready_Base> Callback_NodeCallback_readyPtr;

}

namespace service
{

class Callback_TaskSession_registTransactionCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TaskSession_registTransactionCallback_Base> Callback_TaskSession_registTransactionCallbackPtr;

class Callback_TaskSession_registerIR_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TaskSession_registerIR_Base> Callback_TaskSession_registerIRPtr;

class Callback_NodeChannelSession_invite_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeChannelSession_invite_Base> Callback_NodeChannelSession_invitePtr;

class Callback_NodeChannelSession_notify_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeChannelSession_notify_Base> Callback_NodeChannelSession_notifyPtr;

class Callback_NodeChannelSession_invite2_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeChannelSession_invite2_Base> Callback_NodeChannelSession_invite2Ptr;

class Callback_NodeChannelSession_notify2_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeChannelSession_notify2_Base> Callback_NodeChannelSession_notify2Ptr;

class Callback_NodeChannelSession_ready_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeChannelSession_ready_Base> Callback_NodeChannelSession_readyPtr;

class Callback_NodeChannelSession_inputData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeChannelSession_inputData_Base> Callback_NodeChannelSession_inputDataPtr;

class Callback_NodeChannelSession_input_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeChannelSession_input_Base> Callback_NodeChannelSession_inputPtr;

class Callback_NodeChannelSession_error_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeChannelSession_error_Base> Callback_NodeChannelSession_errorPtr;

}

}

namespace IceProxy
{

namespace platon
{

namespace callback
{

class TaskCallback : virtual public ::IceProxy::Ice::Object
{
public:

    void error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error)
    {
        error(__p_request, __p_error, 0);
    }
    void error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx)
    {
        error(__p_request, __p_error, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_error(__p_request, __p_error, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_error(__p_request, __p_error, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_error(__p_request, __p_error, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_error(__p_request, __p_error, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error)
    {
        return begin_error(__p_request, __p_error, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx)
    {
        return begin_error(__p_request, __p_error, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_error(__p_request, __p_error, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_error(__p_request, __p_error, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::platon::callback::Callback_TaskCallback_errorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_error(__p_request, __p_error, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx, const ::platon::callback::Callback_TaskCallback_errorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_error(__p_request, __p_error, &__ctx, __del, __cookie);
    }

    void end_error(const ::Ice::AsyncResultPtr&);
    
private:

    void error(const ::platon::callback::MpcRequest&, ::platon::ErrorEnum, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_error(const ::platon::callback::MpcRequest&, ::platon::ErrorEnum, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::platon::ErrorEnum inputData(const ::platon::callback::MpcRequest& __p_request, ::platon::ByteList& __p_data, ::platon::ByteList& __p_data_default)
    {
        return inputData(__p_request, __p_data, __p_data_default, 0);
    }
    ::platon::ErrorEnum inputData(const ::platon::callback::MpcRequest& __p_request, ::platon::ByteList& __p_data, ::platon::ByteList& __p_data_default, const ::Ice::Context& __ctx)
    {
        return inputData(__p_request, __p_data, __p_data_default, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::IceInternal::Function<void (::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_inputData(__p_request, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_inputData(__p_request, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_inputData(__p_request, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_inputData(__p_request, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_inputData(const ::platon::callback::MpcRequest& __p_request)
    {
        return begin_inputData(__p_request, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::Ice::Context& __ctx)
    {
        return begin_inputData(__p_request, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inputData(__p_request, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inputData(__p_request, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::platon::callback::Callback_TaskCallback_inputDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inputData(__p_request, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::Ice::Context& __ctx, const ::platon::callback::Callback_TaskCallback_inputDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inputData(__p_request, &__ctx, __del, __cookie);
    }

    ::platon::ErrorEnum end_inputData(::platon::ByteList& __p_data, ::platon::ByteList& __p_data_default, const ::Ice::AsyncResultPtr&);
    
private:

    ::platon::ErrorEnum inputData(const ::platon::callback::MpcRequest&, ::platon::ByteList&, ::platon::ByteList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_inputData(const ::platon::callback::MpcRequest&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data)
    {
        result(__p_request, __p_data, 0);
    }
    void result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx)
    {
        result(__p_request, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_result(__p_request, __p_data, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_result(__p_request, __p_data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_result(__p_request, __p_data, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_result(__p_request, __p_data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data)
    {
        return begin_result(__p_request, __p_data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx)
    {
        return begin_result(__p_request, __p_data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_result(__p_request, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_result(__p_request, __p_data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::platon::callback::Callback_TaskCallback_resultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_result(__p_request, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::platon::callback::Callback_TaskCallback_resultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_result(__p_request, __p_data, &__ctx, __del, __cookie);
    }

    void end_result(const ::Ice::AsyncResultPtr&);
    
private:

    void result(const ::platon::callback::MpcRequest&, const ::platon::ByteList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_result(const ::platon::callback::MpcRequest&, const ::platon::ByteList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_secure(bool __secure) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_twoway() const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_oneway() const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_batchOneway() const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_datagram() const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_batchDatagram() const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_compress(bool __compress) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TaskCallback> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TaskCallback*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TransactionCallback : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string signTransaction(const ::std::string& __p_transaction)
    {
        return signTransaction(__p_transaction, 0);
    }
    ::std::string signTransaction(const ::std::string& __p_transaction, const ::Ice::Context& __ctx)
    {
        return signTransaction(__p_transaction, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_signTransaction(const ::std::string& __p_transaction, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_signTransaction(__p_transaction, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_signTransaction(const ::std::string& __p_transaction, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_signTransaction(__p_transaction, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_signTransaction(const ::std::string& __p_transaction, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_signTransaction(__p_transaction, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_signTransaction(const ::std::string& __p_transaction, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_signTransaction(__p_transaction, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_signTransaction(const ::std::string& __p_transaction, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_signTransaction(const ::std::string& __p_transaction)
    {
        return begin_signTransaction(__p_transaction, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_signTransaction(const ::std::string& __p_transaction, const ::Ice::Context& __ctx)
    {
        return begin_signTransaction(__p_transaction, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_signTransaction(const ::std::string& __p_transaction, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_signTransaction(__p_transaction, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_signTransaction(const ::std::string& __p_transaction, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_signTransaction(__p_transaction, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_signTransaction(const ::std::string& __p_transaction, const ::platon::callback::Callback_TransactionCallback_signTransactionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_signTransaction(__p_transaction, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_signTransaction(const ::std::string& __p_transaction, const ::Ice::Context& __ctx, const ::platon::callback::Callback_TransactionCallback_signTransactionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_signTransaction(__p_transaction, &__ctx, __del, __cookie);
    }

    ::std::string end_signTransaction(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string signTransaction(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_signTransaction(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string signTransaction2(const ::platon::callback::TransactionParams& __p_transparams)
    {
        return signTransaction2(__p_transparams, 0);
    }
    ::std::string signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::Ice::Context& __ctx)
    {
        return signTransaction2(__p_transparams, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_signTransaction2(__p_transparams, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_signTransaction2(__p_transparams, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_signTransaction2(__p_transparams, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_signTransaction2(__p_transparams, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams)
    {
        return begin_signTransaction2(__p_transparams, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::Ice::Context& __ctx)
    {
        return begin_signTransaction2(__p_transparams, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_signTransaction2(__p_transparams, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_signTransaction2(__p_transparams, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::platon::callback::Callback_TransactionCallback_signTransaction2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_signTransaction2(__p_transparams, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::Ice::Context& __ctx, const ::platon::callback::Callback_TransactionCallback_signTransaction2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_signTransaction2(__p_transparams, &__ctx, __del, __cookie);
    }

    ::std::string end_signTransaction2(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string signTransaction2(const ::platon::callback::TransactionParams&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_signTransaction2(const ::platon::callback::TransactionParams&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_secure(bool __secure) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_twoway() const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_oneway() const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_batchOneway() const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_datagram() const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_batchDatagram() const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_compress(bool __compress) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TransactionCallback> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TransactionCallback*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class NodeCallback : virtual public ::IceProxy::Ice::Object
{
public:

    void invite(const ::std::string& __p_taskid, ::Ice::Int __p_status)
    {
        invite(__p_taskid, __p_status, 0);
    }
    void invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx)
    {
        invite(__p_taskid, __p_status, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_invite(__p_taskid, __p_status, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invite(__p_taskid, __p_status, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_invite(__p_taskid, __p_status, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invite(__p_taskid, __p_status, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_invite(const ::std::string& __p_taskid, ::Ice::Int __p_status)
    {
        return begin_invite(__p_taskid, __p_status, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx)
    {
        return begin_invite(__p_taskid, __p_status, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite(__p_taskid, __p_status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite(__p_taskid, __p_status, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::platon::callback::Callback_NodeCallback_invitePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite(__p_taskid, __p_status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::platon::callback::Callback_NodeCallback_invitePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite(__p_taskid, __p_status, &__ctx, __del, __cookie);
    }

    void end_invite(const ::Ice::AsyncResultPtr&);
    
private:

    void invite(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_invite(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void notify(const ::std::string& __p_taskid, ::Ice::Int __p_status)
    {
        notify(__p_taskid, __p_status, 0);
    }
    void notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx)
    {
        notify(__p_taskid, __p_status, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_notify(__p_taskid, __p_status, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notify(__p_taskid, __p_status, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_notify(__p_taskid, __p_status, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notify(__p_taskid, __p_status, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_notify(const ::std::string& __p_taskid, ::Ice::Int __p_status)
    {
        return begin_notify(__p_taskid, __p_status, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx)
    {
        return begin_notify(__p_taskid, __p_status, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify(__p_taskid, __p_status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify(__p_taskid, __p_status, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::platon::callback::Callback_NodeCallback_notifyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify(__p_taskid, __p_status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::platon::callback::Callback_NodeCallback_notifyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify(__p_taskid, __p_status, &__ctx, __del, __cookie);
    }

    void end_notify(const ::Ice::AsyncResultPtr&);
    
private:

    void notify(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_notify(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ready(const ::std::string& __p_taskid, ::Ice::Int __p_status)
    {
        ready(__p_taskid, __p_status, 0);
    }
    void ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx)
    {
        ready(__p_taskid, __p_status, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ready(__p_taskid, __p_status, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ready(__p_taskid, __p_status, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ready(__p_taskid, __p_status, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ready(__p_taskid, __p_status, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_ready(const ::std::string& __p_taskid, ::Ice::Int __p_status)
    {
        return begin_ready(__p_taskid, __p_status, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx)
    {
        return begin_ready(__p_taskid, __p_status, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ready(__p_taskid, __p_status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ready(__p_taskid, __p_status, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::platon::callback::Callback_NodeCallback_readyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ready(__p_taskid, __p_status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context& __ctx, const ::platon::callback::Callback_NodeCallback_readyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ready(__p_taskid, __p_status, &__ctx, __del, __cookie);
    }

    void end_ready(const ::Ice::AsyncResultPtr&);
    
private:

    void ready(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ready(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_secure(bool __secure) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_twoway() const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_oneway() const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_batchOneway() const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_datagram() const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_batchDatagram() const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_compress(bool __compress) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_timeout(int __timeout) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NodeCallback> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<NodeCallback*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

namespace service
{

class TaskSession : virtual public ::IceProxy::Ice::Object
{
public:

    ::platon::ErrorEnum registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb)
    {
        return registTransactionCallback(__p_user_address, __p_cb, 0);
    }
    ::platon::ErrorEnum registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        return registTransactionCallback(__p_user_address, __p_cb, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::IceInternal::Function<void (::platon::ErrorEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registTransactionCallback(__p_user_address, __p_cb, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registTransactionCallback(__p_user_address, __p_cb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::platon::ErrorEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registTransactionCallback(__p_user_address, __p_cb, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registTransactionCallback(__p_user_address, __p_cb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::platon::ErrorEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb)
    {
        return begin_registTransactionCallback(__p_user_address, __p_cb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        return begin_registTransactionCallback(__p_user_address, __p_cb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registTransactionCallback(__p_user_address, __p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registTransactionCallback(__p_user_address, __p_cb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::platon::service::Callback_TaskSession_registTransactionCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registTransactionCallback(__p_user_address, __p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::platon::service::Callback_TaskSession_registTransactionCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registTransactionCallback(__p_user_address, __p_cb, &__ctx, __del, __cookie);
    }

    ::platon::ErrorEnum end_registTransactionCallback(const ::Ice::AsyncResultPtr&);
    
private:

    ::platon::ErrorEnum registTransactionCallback(const ::std::string&, const ::platon::callback::TransactionCallbackPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_registTransactionCallback(const ::std::string&, const ::platon::callback::TransactionCallbackPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::platon::ErrorEnum registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb)
    {
        return registerIR(__p_ir_hash, __p_cb, 0);
    }
    ::platon::ErrorEnum registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        return registerIR(__p_ir_hash, __p_cb, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::IceInternal::Function<void (::platon::ErrorEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registerIR(__p_ir_hash, __p_cb, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerIR(__p_ir_hash, __p_cb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::platon::ErrorEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registerIR(__p_ir_hash, __p_cb, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerIR(__p_ir_hash, __p_cb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::platon::ErrorEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb)
    {
        return begin_registerIR(__p_ir_hash, __p_cb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        return begin_registerIR(__p_ir_hash, __p_cb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerIR(__p_ir_hash, __p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerIR(__p_ir_hash, __p_cb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::platon::service::Callback_TaskSession_registerIRPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerIR(__p_ir_hash, __p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::platon::service::Callback_TaskSession_registerIRPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerIR(__p_ir_hash, __p_cb, &__ctx, __del, __cookie);
    }

    ::platon::ErrorEnum end_registerIR(const ::Ice::AsyncResultPtr&);
    
private:

    ::platon::ErrorEnum registerIR(const ::std::string&, const ::platon::callback::TaskCallbackPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_registerIR(const ::std::string&, const ::platon::callback::TaskCallbackPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TaskSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_twoway() const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_oneway() const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_batchOneway() const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_datagram() const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_batchDatagram() const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TaskSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TaskSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class NodeChannelSession : virtual public ::IceProxy::Ice::Object
{
public:

    void invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb)
    {
        invite(__p_taskparams, __p_cb, 0);
    }
    void invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        invite(__p_taskparams, __p_cb, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_invite(__p_taskparams, __p_cb, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invite(__p_taskparams, __p_cb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_invite(__p_taskparams, __p_cb, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invite(__p_taskparams, __p_cb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb)
    {
        return begin_invite(__p_taskparams, __p_cb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        return begin_invite(__p_taskparams, __p_cb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite(__p_taskparams, __p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite(__p_taskparams, __p_cb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::platon::service::Callback_NodeChannelSession_invitePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite(__p_taskparams, __p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::platon::service::Callback_NodeChannelSession_invitePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite(__p_taskparams, __p_cb, &__ctx, __del, __cookie);
    }

    void end_invite(const ::Ice::AsyncResultPtr&);
    
private:

    void invite(const ::platon::service::TaskParams&, const ::platon::callback::NodeCallbackPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_invite(const ::platon::service::TaskParams&, const ::platon::callback::NodeCallbackPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb)
    {
        notify(__p_taskparams, __p_cb, 0);
    }
    void notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        notify(__p_taskparams, __p_cb, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_notify(__p_taskparams, __p_cb, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notify(__p_taskparams, __p_cb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_notify(__p_taskparams, __p_cb, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notify(__p_taskparams, __p_cb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb)
    {
        return begin_notify(__p_taskparams, __p_cb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        return begin_notify(__p_taskparams, __p_cb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify(__p_taskparams, __p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify(__p_taskparams, __p_cb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::platon::service::Callback_NodeChannelSession_notifyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify(__p_taskparams, __p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::platon::service::Callback_NodeChannelSession_notifyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify(__p_taskparams, __p_cb, &__ctx, __del, __cookie);
    }

    void end_notify(const ::Ice::AsyncResultPtr&);
    
private:

    void notify(const ::platon::service::TaskParams&, const ::platon::callback::NodeCallbackPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_notify(const ::platon::service::TaskParams&, const ::platon::callback::NodeCallbackPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int invite2(const ::platon::service::TaskParams& __p_taskparams)
    {
        return invite2(__p_taskparams, 0);
    }
    ::Ice::Int invite2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx)
    {
        return invite2(__p_taskparams, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_invite2(__p_taskparams, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invite2(__p_taskparams, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_invite2(__p_taskparams, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_invite2(__p_taskparams, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_invite2(const ::platon::service::TaskParams& __p_taskparams)
    {
        return begin_invite2(__p_taskparams, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx)
    {
        return begin_invite2(__p_taskparams, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite2(__p_taskparams, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite2(__p_taskparams, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::platon::service::Callback_NodeChannelSession_invite2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite2(__p_taskparams, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx, const ::platon::service::Callback_NodeChannelSession_invite2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_invite2(__p_taskparams, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_invite2(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int invite2(const ::platon::service::TaskParams&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_invite2(const ::platon::service::TaskParams&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int notify2(const ::platon::service::TaskParams& __p_taskparams)
    {
        return notify2(__p_taskparams, 0);
    }
    ::Ice::Int notify2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx)
    {
        return notify2(__p_taskparams, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_notify2(__p_taskparams, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notify2(__p_taskparams, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_notify2(__p_taskparams, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notify2(__p_taskparams, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_notify2(const ::platon::service::TaskParams& __p_taskparams)
    {
        return begin_notify2(__p_taskparams, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx)
    {
        return begin_notify2(__p_taskparams, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify2(__p_taskparams, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify2(__p_taskparams, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::platon::service::Callback_NodeChannelSession_notify2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify2(__p_taskparams, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context& __ctx, const ::platon::service::Callback_NodeChannelSession_notify2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notify2(__p_taskparams, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_notify2(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int notify2(const ::platon::service::TaskParams&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_notify2(const ::platon::service::TaskParams&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb)
    {
        ready(__p_taskparams, __p_cb, 0);
    }
    void ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        ready(__p_taskparams, __p_cb, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ready(__p_taskparams, __p_cb, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ready(__p_taskparams, __p_cb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ready(__p_taskparams, __p_cb, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ready(__p_taskparams, __p_cb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb)
    {
        return begin_ready(__p_taskparams, __p_cb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        return begin_ready(__p_taskparams, __p_cb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ready(__p_taskparams, __p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ready(__p_taskparams, __p_cb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::platon::service::Callback_NodeChannelSession_readyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ready(__p_taskparams, __p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::platon::service::Callback_NodeChannelSession_readyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ready(__p_taskparams, __p_cb, &__ctx, __del, __cookie);
    }

    void end_ready(const ::Ice::AsyncResultPtr&);
    
private:

    void ready(const ::platon::service::TaskParams&, const ::platon::callback::NodeCallbackPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ready(const ::platon::service::TaskParams&, const ::platon::callback::NodeCallbackPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data)
    {
        inputData(__p_taskId, __p_fromUser, __p_data, 0);
    }
    void inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx)
    {
        inputData(__p_taskId, __p_fromUser, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_inputData(__p_taskId, __p_fromUser, __p_data, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_inputData(__p_taskId, __p_fromUser, __p_data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_inputData(__p_taskId, __p_fromUser, __p_data, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_inputData(__p_taskId, __p_fromUser, __p_data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data)
    {
        return begin_inputData(__p_taskId, __p_fromUser, __p_data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx)
    {
        return begin_inputData(__p_taskId, __p_fromUser, __p_data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inputData(__p_taskId, __p_fromUser, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inputData(__p_taskId, __p_fromUser, __p_data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::platon::service::Callback_NodeChannelSession_inputDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inputData(__p_taskId, __p_fromUser, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::platon::service::Callback_NodeChannelSession_inputDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inputData(__p_taskId, __p_fromUser, __p_data, &__ctx, __del, __cookie);
    }

    void end_inputData(const ::Ice::AsyncResultPtr&);
    
private:

    void inputData(const ::std::string&, const ::std::string&, const ::platon::ByteList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_inputData(const ::std::string&, const ::std::string&, const ::platon::ByteList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void input(const ::platon::ByteList& __p_data)
    {
        input(__p_data, 0);
    }
    void input(const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx)
    {
        input(__p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_input(const ::platon::ByteList& __p_data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_input(__p_data, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_input(const ::platon::ByteList& __p_data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_input(__p_data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_input(const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_input(__p_data, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_input(const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_input(__p_data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_input(const ::platon::ByteList& __p_data)
    {
        return begin_input(__p_data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_input(const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx)
    {
        return begin_input(__p_data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_input(const ::platon::ByteList& __p_data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_input(__p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_input(const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_input(__p_data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_input(const ::platon::ByteList& __p_data, const ::platon::service::Callback_NodeChannelSession_inputPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_input(__p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_input(const ::platon::ByteList& __p_data, const ::Ice::Context& __ctx, const ::platon::service::Callback_NodeChannelSession_inputPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_input(__p_data, &__ctx, __del, __cookie);
    }

    void end_input(const ::Ice::AsyncResultPtr&);
    
private:

    void input(const ::platon::ByteList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_input(const ::platon::ByteList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error)
    {
        error(__p_taskId, __p_role, __p_from, __p_error, 0);
    }
    void error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx)
    {
        error(__p_taskId, __p_role, __p_from, __p_error, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_error(__p_taskId, __p_role, __p_from, __p_error, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_error(__p_taskId, __p_role, __p_from, __p_error, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_error(__p_taskId, __p_role, __p_from, __p_error, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_error(__p_taskId, __p_role, __p_from, __p_error, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error)
    {
        return begin_error(__p_taskId, __p_role, __p_from, __p_error, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx)
    {
        return begin_error(__p_taskId, __p_role, __p_from, __p_error, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_error(__p_taskId, __p_role, __p_from, __p_error, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_error(__p_taskId, __p_role, __p_from, __p_error, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::platon::service::Callback_NodeChannelSession_errorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_error(__p_taskId, __p_role, __p_from, __p_error, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::Ice::Context& __ctx, const ::platon::service::Callback_NodeChannelSession_errorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_error(__p_taskId, __p_role, __p_from, __p_error, &__ctx, __del, __cookie);
    }

    void end_error(const ::Ice::AsyncResultPtr&);
    
private:

    void error(const ::std::string&, ::platon::MPCRole, const ::std::string&, ::platon::ErrorEnum, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_error(const ::std::string&, ::platon::MPCRole, const ::std::string&, ::platon::ErrorEnum, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_twoway() const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_oneway() const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_batchOneway() const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_datagram() const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_batchDatagram() const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NodeChannelSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<NodeChannelSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace platon
{

namespace callback
{

class TaskCallback : virtual public ::Ice::Object
{
public:

    typedef TaskCallbackPrx ProxyType;
    typedef TaskCallbackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void error(const ::platon::callback::MpcRequest&, ::platon::ErrorEnum, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___error(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::platon::ErrorEnum inputData(const ::platon::callback::MpcRequest&, ::platon::ByteList&, ::platon::ByteList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___inputData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void result(const ::platon::callback::MpcRequest&, const ::platon::ByteList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___result(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const TaskCallback& l, const TaskCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TaskCallback& l, const TaskCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class TransactionCallback : virtual public ::Ice::Object
{
public:

    typedef TransactionCallbackPrx ProxyType;
    typedef TransactionCallbackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string signTransaction(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___signTransaction(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string signTransaction2(const ::platon::callback::TransactionParams&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___signTransaction2(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const TransactionCallback& l, const TransactionCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TransactionCallback& l, const TransactionCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class NodeCallback : virtual public ::Ice::Object
{
public:

    typedef NodeCallbackPrx ProxyType;
    typedef NodeCallbackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void invite(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___invite(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void notify(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___notify(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ready(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ready(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const NodeCallback& l, const NodeCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const NodeCallback& l, const NodeCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace service
{

class TaskSession : virtual public ::Ice::Object
{
public:

    typedef TaskSessionPrx ProxyType;
    typedef TaskSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::platon::ErrorEnum registTransactionCallback(const ::std::string&, const ::platon::callback::TransactionCallbackPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registTransactionCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::platon::ErrorEnum registerIR(const ::std::string&, const ::platon::callback::TaskCallbackPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registerIR(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const TaskSession& l, const TaskSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TaskSession& l, const TaskSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class NodeChannelSession : virtual public ::Ice::Object
{
public:

    typedef NodeChannelSessionPrx ProxyType;
    typedef NodeChannelSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void invite(const ::platon::service::TaskParams&, const ::platon::callback::NodeCallbackPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___invite(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void notify(const ::platon::service::TaskParams&, const ::platon::callback::NodeCallbackPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___notify(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int invite2(const ::platon::service::TaskParams&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___invite2(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int notify2(const ::platon::service::TaskParams&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___notify2(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ready(const ::platon::service::TaskParams&, const ::platon::callback::NodeCallbackPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ready(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void inputData(const ::std::string&, const ::std::string&, const ::platon::ByteList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___inputData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void input(const ::platon::ByteList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___input(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void error(const ::std::string&, ::platon::MPCRole, const ::std::string&, ::platon::ErrorEnum, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___error(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const NodeChannelSession& l, const NodeChannelSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const NodeChannelSession& l, const NodeChannelSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace platon
{

namespace callback
{

template<class T>
class CallbackNC_TaskCallback_error : public Callback_TaskCallback_error_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TaskCallback_error(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TaskCallback_errorPtr
newCallback_TaskCallback_error(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskCallback_error<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TaskCallback_errorPtr
newCallback_TaskCallback_error(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskCallback_error<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TaskCallback_errorPtr
newCallback_TaskCallback_error(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskCallback_error<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TaskCallback_errorPtr
newCallback_TaskCallback_error(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskCallback_error<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TaskCallback_error : public Callback_TaskCallback_error_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TaskCallback_error(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TaskCallback_errorPtr
newCallback_TaskCallback_error(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskCallback_error<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TaskCallback_errorPtr
newCallback_TaskCallback_error(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskCallback_error<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TaskCallback_errorPtr
newCallback_TaskCallback_error(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskCallback_error<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TaskCallback_errorPtr
newCallback_TaskCallback_error(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskCallback_error<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TaskCallback_inputData : public Callback_TaskCallback_inputData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&);

    CallbackNC_TaskCallback_inputData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::callback::TaskCallbackPrx __proxy = ::platon::callback::TaskCallbackPrx::uncheckedCast(__result->getProxy());
        ::platon::ByteList data;
        ::platon::ByteList data_default;
        ::platon::ErrorEnum __ret;
        try
        {
            __ret = __proxy->end_inputData(data, data_default, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, data, data_default);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TaskCallback_inputDataPtr
newCallback_TaskCallback_inputData(const IceUtil::Handle<T>& instance, void (T::*cb)(::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskCallback_inputData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TaskCallback_inputDataPtr
newCallback_TaskCallback_inputData(T* instance, void (T::*cb)(::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskCallback_inputData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TaskCallback_inputData : public Callback_TaskCallback_inputData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&, const CT&);

    Callback_TaskCallback_inputData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::callback::TaskCallbackPrx __proxy = ::platon::callback::TaskCallbackPrx::uncheckedCast(__result->getProxy());
        ::platon::ByteList data;
        ::platon::ByteList data_default;
        ::platon::ErrorEnum __ret;
        try
        {
            __ret = __proxy->end_inputData(data, data_default, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, data, data_default, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TaskCallback_inputDataPtr
newCallback_TaskCallback_inputData(const IceUtil::Handle<T>& instance, void (T::*cb)(::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskCallback_inputData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TaskCallback_inputDataPtr
newCallback_TaskCallback_inputData(T* instance, void (T::*cb)(::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskCallback_inputData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TaskCallback_result : public Callback_TaskCallback_result_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TaskCallback_result(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TaskCallback_resultPtr
newCallback_TaskCallback_result(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskCallback_result<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TaskCallback_resultPtr
newCallback_TaskCallback_result(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskCallback_result<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TaskCallback_resultPtr
newCallback_TaskCallback_result(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskCallback_result<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TaskCallback_resultPtr
newCallback_TaskCallback_result(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskCallback_result<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TaskCallback_result : public Callback_TaskCallback_result_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TaskCallback_result(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TaskCallback_resultPtr
newCallback_TaskCallback_result(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskCallback_result<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TaskCallback_resultPtr
newCallback_TaskCallback_result(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskCallback_result<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TaskCallback_resultPtr
newCallback_TaskCallback_result(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskCallback_result<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TaskCallback_resultPtr
newCallback_TaskCallback_result(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskCallback_result<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransactionCallback_signTransaction : public Callback_TransactionCallback_signTransaction_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_TransactionCallback_signTransaction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::callback::TransactionCallbackPrx __proxy = ::platon::callback::TransactionCallbackPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_signTransaction(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TransactionCallback_signTransactionPtr
newCallback_TransactionCallback_signTransaction(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransactionCallback_signTransaction<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransactionCallback_signTransactionPtr
newCallback_TransactionCallback_signTransaction(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransactionCallback_signTransaction<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransactionCallback_signTransaction : public Callback_TransactionCallback_signTransaction_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_TransactionCallback_signTransaction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::callback::TransactionCallbackPrx __proxy = ::platon::callback::TransactionCallbackPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_signTransaction(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TransactionCallback_signTransactionPtr
newCallback_TransactionCallback_signTransaction(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransactionCallback_signTransaction<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransactionCallback_signTransactionPtr
newCallback_TransactionCallback_signTransaction(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransactionCallback_signTransaction<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransactionCallback_signTransaction2 : public Callback_TransactionCallback_signTransaction2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_TransactionCallback_signTransaction2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::callback::TransactionCallbackPrx __proxy = ::platon::callback::TransactionCallbackPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_signTransaction2(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TransactionCallback_signTransaction2Ptr
newCallback_TransactionCallback_signTransaction2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransactionCallback_signTransaction2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransactionCallback_signTransaction2Ptr
newCallback_TransactionCallback_signTransaction2(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransactionCallback_signTransaction2<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransactionCallback_signTransaction2 : public Callback_TransactionCallback_signTransaction2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_TransactionCallback_signTransaction2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::callback::TransactionCallbackPrx __proxy = ::platon::callback::TransactionCallbackPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_signTransaction2(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TransactionCallback_signTransaction2Ptr
newCallback_TransactionCallback_signTransaction2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransactionCallback_signTransaction2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransactionCallback_signTransaction2Ptr
newCallback_TransactionCallback_signTransaction2(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransactionCallback_signTransaction2<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_NodeCallback_invite : public Callback_NodeCallback_invite_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeCallback_invite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeCallback_invitePtr
newCallback_NodeCallback_invite(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_invite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeCallback_invitePtr
newCallback_NodeCallback_invite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_invite<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeCallback_invitePtr
newCallback_NodeCallback_invite(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_invite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeCallback_invitePtr
newCallback_NodeCallback_invite(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_invite<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeCallback_invite : public Callback_NodeCallback_invite_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeCallback_invite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeCallback_invitePtr
newCallback_NodeCallback_invite(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_invite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeCallback_invitePtr
newCallback_NodeCallback_invite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_invite<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeCallback_invitePtr
newCallback_NodeCallback_invite(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_invite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeCallback_invitePtr
newCallback_NodeCallback_invite(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_invite<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeCallback_notify : public Callback_NodeCallback_notify_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeCallback_notify(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeCallback_notifyPtr
newCallback_NodeCallback_notify(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_notify<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeCallback_notifyPtr
newCallback_NodeCallback_notify(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_notify<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeCallback_notifyPtr
newCallback_NodeCallback_notify(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_notify<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeCallback_notifyPtr
newCallback_NodeCallback_notify(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_notify<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeCallback_notify : public Callback_NodeCallback_notify_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeCallback_notify(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeCallback_notifyPtr
newCallback_NodeCallback_notify(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_notify<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeCallback_notifyPtr
newCallback_NodeCallback_notify(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_notify<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeCallback_notifyPtr
newCallback_NodeCallback_notify(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_notify<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeCallback_notifyPtr
newCallback_NodeCallback_notify(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_notify<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeCallback_ready : public Callback_NodeCallback_ready_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeCallback_ready(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeCallback_readyPtr
newCallback_NodeCallback_ready(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_ready<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeCallback_readyPtr
newCallback_NodeCallback_ready(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_ready<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeCallback_readyPtr
newCallback_NodeCallback_ready(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_ready<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeCallback_readyPtr
newCallback_NodeCallback_ready(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeCallback_ready<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeCallback_ready : public Callback_NodeCallback_ready_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeCallback_ready(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeCallback_readyPtr
newCallback_NodeCallback_ready(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_ready<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeCallback_readyPtr
newCallback_NodeCallback_ready(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_ready<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeCallback_readyPtr
newCallback_NodeCallback_ready(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_ready<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeCallback_readyPtr
newCallback_NodeCallback_ready(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeCallback_ready<T, CT>(instance, 0, excb, sentcb);
}

}

namespace service
{

template<class T>
class CallbackNC_TaskSession_registTransactionCallback : public Callback_TaskSession_registTransactionCallback_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::platon::ErrorEnum);

    CallbackNC_TaskSession_registTransactionCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::service::TaskSessionPrx __proxy = ::platon::service::TaskSessionPrx::uncheckedCast(__result->getProxy());
        ::platon::ErrorEnum __ret;
        try
        {
            __ret = __proxy->end_registTransactionCallback(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TaskSession_registTransactionCallbackPtr
newCallback_TaskSession_registTransactionCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(::platon::ErrorEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskSession_registTransactionCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TaskSession_registTransactionCallbackPtr
newCallback_TaskSession_registTransactionCallback(T* instance, void (T::*cb)(::platon::ErrorEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskSession_registTransactionCallback<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TaskSession_registTransactionCallback : public Callback_TaskSession_registTransactionCallback_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::platon::ErrorEnum, const CT&);

    Callback_TaskSession_registTransactionCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::service::TaskSessionPrx __proxy = ::platon::service::TaskSessionPrx::uncheckedCast(__result->getProxy());
        ::platon::ErrorEnum __ret;
        try
        {
            __ret = __proxy->end_registTransactionCallback(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TaskSession_registTransactionCallbackPtr
newCallback_TaskSession_registTransactionCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(::platon::ErrorEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskSession_registTransactionCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TaskSession_registTransactionCallbackPtr
newCallback_TaskSession_registTransactionCallback(T* instance, void (T::*cb)(::platon::ErrorEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskSession_registTransactionCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TaskSession_registerIR : public Callback_TaskSession_registerIR_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::platon::ErrorEnum);

    CallbackNC_TaskSession_registerIR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::service::TaskSessionPrx __proxy = ::platon::service::TaskSessionPrx::uncheckedCast(__result->getProxy());
        ::platon::ErrorEnum __ret;
        try
        {
            __ret = __proxy->end_registerIR(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TaskSession_registerIRPtr
newCallback_TaskSession_registerIR(const IceUtil::Handle<T>& instance, void (T::*cb)(::platon::ErrorEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskSession_registerIR<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TaskSession_registerIRPtr
newCallback_TaskSession_registerIR(T* instance, void (T::*cb)(::platon::ErrorEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TaskSession_registerIR<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TaskSession_registerIR : public Callback_TaskSession_registerIR_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::platon::ErrorEnum, const CT&);

    Callback_TaskSession_registerIR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::service::TaskSessionPrx __proxy = ::platon::service::TaskSessionPrx::uncheckedCast(__result->getProxy());
        ::platon::ErrorEnum __ret;
        try
        {
            __ret = __proxy->end_registerIR(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TaskSession_registerIRPtr
newCallback_TaskSession_registerIR(const IceUtil::Handle<T>& instance, void (T::*cb)(::platon::ErrorEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskSession_registerIR<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TaskSession_registerIRPtr
newCallback_TaskSession_registerIR(T* instance, void (T::*cb)(::platon::ErrorEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TaskSession_registerIR<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_NodeChannelSession_invite : public Callback_NodeChannelSession_invite_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeChannelSession_invite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeChannelSession_invitePtr
newCallback_NodeChannelSession_invite(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_invite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_invitePtr
newCallback_NodeChannelSession_invite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_invite<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_invitePtr
newCallback_NodeChannelSession_invite(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_invite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_invitePtr
newCallback_NodeChannelSession_invite(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_invite<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeChannelSession_invite : public Callback_NodeChannelSession_invite_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeChannelSession_invite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeChannelSession_invitePtr
newCallback_NodeChannelSession_invite(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_invite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_invitePtr
newCallback_NodeChannelSession_invite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_invite<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_invitePtr
newCallback_NodeChannelSession_invite(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_invite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_invitePtr
newCallback_NodeChannelSession_invite(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_invite<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeChannelSession_notify : public Callback_NodeChannelSession_notify_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeChannelSession_notify(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeChannelSession_notifyPtr
newCallback_NodeChannelSession_notify(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_notify<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_notifyPtr
newCallback_NodeChannelSession_notify(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_notify<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_notifyPtr
newCallback_NodeChannelSession_notify(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_notify<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_notifyPtr
newCallback_NodeChannelSession_notify(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_notify<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeChannelSession_notify : public Callback_NodeChannelSession_notify_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeChannelSession_notify(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeChannelSession_notifyPtr
newCallback_NodeChannelSession_notify(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_notify<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_notifyPtr
newCallback_NodeChannelSession_notify(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_notify<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_notifyPtr
newCallback_NodeChannelSession_notify(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_notify<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_notifyPtr
newCallback_NodeChannelSession_notify(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_notify<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeChannelSession_invite2 : public Callback_NodeChannelSession_invite2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_NodeChannelSession_invite2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::service::NodeChannelSessionPrx __proxy = ::platon::service::NodeChannelSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_invite2(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_NodeChannelSession_invite2Ptr
newCallback_NodeChannelSession_invite2(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_invite2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_invite2Ptr
newCallback_NodeChannelSession_invite2(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_invite2<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeChannelSession_invite2 : public Callback_NodeChannelSession_invite2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_NodeChannelSession_invite2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::service::NodeChannelSessionPrx __proxy = ::platon::service::NodeChannelSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_invite2(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_NodeChannelSession_invite2Ptr
newCallback_NodeChannelSession_invite2(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_invite2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_invite2Ptr
newCallback_NodeChannelSession_invite2(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_invite2<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_NodeChannelSession_notify2 : public Callback_NodeChannelSession_notify2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_NodeChannelSession_notify2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::service::NodeChannelSessionPrx __proxy = ::platon::service::NodeChannelSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_notify2(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_NodeChannelSession_notify2Ptr
newCallback_NodeChannelSession_notify2(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_notify2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_notify2Ptr
newCallback_NodeChannelSession_notify2(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_notify2<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeChannelSession_notify2 : public Callback_NodeChannelSession_notify2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_NodeChannelSession_notify2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::platon::service::NodeChannelSessionPrx __proxy = ::platon::service::NodeChannelSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_notify2(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_NodeChannelSession_notify2Ptr
newCallback_NodeChannelSession_notify2(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_notify2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_notify2Ptr
newCallback_NodeChannelSession_notify2(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_notify2<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_NodeChannelSession_ready : public Callback_NodeChannelSession_ready_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeChannelSession_ready(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeChannelSession_readyPtr
newCallback_NodeChannelSession_ready(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_ready<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_readyPtr
newCallback_NodeChannelSession_ready(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_ready<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_readyPtr
newCallback_NodeChannelSession_ready(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_ready<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_readyPtr
newCallback_NodeChannelSession_ready(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_ready<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeChannelSession_ready : public Callback_NodeChannelSession_ready_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeChannelSession_ready(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeChannelSession_readyPtr
newCallback_NodeChannelSession_ready(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_ready<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_readyPtr
newCallback_NodeChannelSession_ready(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_ready<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_readyPtr
newCallback_NodeChannelSession_ready(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_ready<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_readyPtr
newCallback_NodeChannelSession_ready(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_ready<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeChannelSession_inputData : public Callback_NodeChannelSession_inputData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeChannelSession_inputData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeChannelSession_inputDataPtr
newCallback_NodeChannelSession_inputData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_inputData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_inputDataPtr
newCallback_NodeChannelSession_inputData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_inputData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_inputDataPtr
newCallback_NodeChannelSession_inputData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_inputData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_inputDataPtr
newCallback_NodeChannelSession_inputData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_inputData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeChannelSession_inputData : public Callback_NodeChannelSession_inputData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeChannelSession_inputData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeChannelSession_inputDataPtr
newCallback_NodeChannelSession_inputData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_inputData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_inputDataPtr
newCallback_NodeChannelSession_inputData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_inputData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_inputDataPtr
newCallback_NodeChannelSession_inputData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_inputData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_inputDataPtr
newCallback_NodeChannelSession_inputData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_inputData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeChannelSession_input : public Callback_NodeChannelSession_input_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeChannelSession_input(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeChannelSession_inputPtr
newCallback_NodeChannelSession_input(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_input<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_inputPtr
newCallback_NodeChannelSession_input(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_input<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_inputPtr
newCallback_NodeChannelSession_input(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_input<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_inputPtr
newCallback_NodeChannelSession_input(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_input<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeChannelSession_input : public Callback_NodeChannelSession_input_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeChannelSession_input(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeChannelSession_inputPtr
newCallback_NodeChannelSession_input(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_input<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_inputPtr
newCallback_NodeChannelSession_input(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_input<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_inputPtr
newCallback_NodeChannelSession_input(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_input<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_inputPtr
newCallback_NodeChannelSession_input(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_input<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeChannelSession_error : public Callback_NodeChannelSession_error_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeChannelSession_error(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeChannelSession_errorPtr
newCallback_NodeChannelSession_error(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_error<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_errorPtr
newCallback_NodeChannelSession_error(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_error<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_errorPtr
newCallback_NodeChannelSession_error(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_error<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeChannelSession_errorPtr
newCallback_NodeChannelSession_error(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeChannelSession_error<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeChannelSession_error : public Callback_NodeChannelSession_error_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeChannelSession_error(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeChannelSession_errorPtr
newCallback_NodeChannelSession_error(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_error<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_errorPtr
newCallback_NodeChannelSession_error(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_error<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_errorPtr
newCallback_NodeChannelSession_error(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_error<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeChannelSession_errorPtr
newCallback_NodeChannelSession_error(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeChannelSession_error<T, CT>(instance, 0, excb, sentcb);
}

}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
