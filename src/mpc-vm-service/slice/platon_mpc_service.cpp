// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `platon_mpc_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <platon_mpc_service.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

namespace
{

const ::std::string __platon__callback__TaskCallback__error_name = "error";

const ::std::string __platon__callback__TaskCallback__inputData_name = "inputData";

const ::std::string __platon__callback__TaskCallback__result_name = "result";

const ::std::string __platon__callback__TransactionCallback__signTransaction_name = "signTransaction";

const ::std::string __platon__callback__TransactionCallback__signTransaction2_name = "signTransaction2";

const ::std::string __platon__callback__NodeCallback__invite_name = "invite";

const ::std::string __platon__callback__NodeCallback__notify_name = "notify";

const ::std::string __platon__callback__NodeCallback__ready_name = "ready";

}

namespace
{

const ::std::string __platon__service__TaskSession__registTransactionCallback_name = "registTransactionCallback";

const ::std::string __platon__service__TaskSession__registerIR_name = "registerIR";

const ::std::string __platon__service__NodeChannelSession__invite_name = "invite";

const ::std::string __platon__service__NodeChannelSession__notify_name = "notify";

const ::std::string __platon__service__NodeChannelSession__invite2_name = "invite2";

const ::std::string __platon__service__NodeChannelSession__notify2_name = "notify2";

const ::std::string __platon__service__NodeChannelSession__ready_name = "ready";

const ::std::string __platon__service__NodeChannelSession__inputData_name = "inputData";

const ::std::string __platon__service__NodeChannelSession__input_name = "input";

const ::std::string __platon__service__NodeChannelSession__error_name = "error";

}

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::platon::callback::upCast(::IceProxy::platon::callback::TaskCallback* p) { return p; }

void
::IceProxy::platon::callback::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::platon::callback::TaskCallback>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::platon::callback::TaskCallback;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::platon::callback::TaskCallback::error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __platon__callback__TaskCallback__error_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_request);
        __os->write(__p_error);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::platon::callback::TaskCallback::begin_error(const ::platon::callback::MpcRequest& __p_request, ::platon::ErrorEnum __p_error, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__callback__TaskCallback__error_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__callback__TaskCallback__error_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_request);
        __os->write(__p_error);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::platon::callback::TaskCallback::end_error(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __platon__callback__TaskCallback__error_name);
}

::platon::ErrorEnum
IceProxy::platon::callback::TaskCallback::inputData(const ::platon::callback::MpcRequest& __p_request, ::platon::ByteList& __p_data, ::platon::ByteList& __p_data_default, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__platon__callback__TaskCallback__inputData_name);
    ::IceInternal::Outgoing __og(this, __platon__callback__TaskCallback__inputData_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_request);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::platon::ErrorEnum __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_data);
    __is->read(__p_data_default);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::platon::callback::TaskCallback::begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__platon__callback__TaskCallback__inputData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__callback__TaskCallback__inputData_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__callback__TaskCallback__inputData_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_request);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::platon::callback::TaskCallback::__begin_inputData(const ::platon::callback::MpcRequest& __p_request, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::platon::callback::TaskCallbackPrx __proxy = ::platon::callback::TaskCallbackPrx::uncheckedCast(__result->getProxy());
            ::platon::ByteList __p_data;
            ::platon::ByteList __p_data_default;
            ::platon::ErrorEnum __ret;
            try
            {
                __ret = __proxy->end_inputData(__p_data, __p_data_default, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_data, __p_data_default);
            }
        }
    
    private:
        
        ::std::function<void (::platon::ErrorEnum, const ::platon::ByteList&, const ::platon::ByteList&)> _response;
    };
    return begin_inputData(__p_request, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::platon::ErrorEnum
IceProxy::platon::callback::TaskCallback::end_inputData(::platon::ByteList& __p_data, ::platon::ByteList& __p_data_default, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __platon__callback__TaskCallback__inputData_name);
    ::platon::ErrorEnum __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_data);
    __is->read(__p_data_default);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::platon::callback::TaskCallback::result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __platon__callback__TaskCallback__result_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_request);
        __os->write(__p_data);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::platon::callback::TaskCallback::begin_result(const ::platon::callback::MpcRequest& __p_request, const ::platon::ByteList& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__callback__TaskCallback__result_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__callback__TaskCallback__result_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_request);
        __os->write(__p_data);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::platon::callback::TaskCallback::end_result(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __platon__callback__TaskCallback__result_name);
}

const ::std::string&
IceProxy::platon::callback::TaskCallback::ice_staticId()
{
    return ::platon::callback::TaskCallback::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::platon::callback::TaskCallback::__newInstance() const
{
    return new TaskCallback;
}
::IceProxy::Ice::Object* ::IceProxy::platon::callback::upCast(::IceProxy::platon::callback::TransactionCallback* p) { return p; }

void
::IceProxy::platon::callback::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::platon::callback::TransactionCallback>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::platon::callback::TransactionCallback;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::platon::callback::TransactionCallback::signTransaction(const ::std::string& __p_transaction, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__platon__callback__TransactionCallback__signTransaction_name);
    ::IceInternal::Outgoing __og(this, __platon__callback__TransactionCallback__signTransaction_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_transaction);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::platon::callback::TransactionCallback::begin_signTransaction(const ::std::string& __p_transaction, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__platon__callback__TransactionCallback__signTransaction_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__callback__TransactionCallback__signTransaction_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__callback__TransactionCallback__signTransaction_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_transaction);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::platon::callback::TransactionCallback::__begin_signTransaction(const ::std::string& __p_transaction, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::platon::callback::TransactionCallbackPrx __proxy = ::platon::callback::TransactionCallbackPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_signTransaction(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_signTransaction(__p_transaction, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::platon::callback::TransactionCallback::end_signTransaction(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __platon__callback__TransactionCallback__signTransaction_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::std::string
IceProxy::platon::callback::TransactionCallback::signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__platon__callback__TransactionCallback__signTransaction2_name);
    ::IceInternal::Outgoing __og(this, __platon__callback__TransactionCallback__signTransaction2_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_transparams);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::platon::callback::TransactionCallback::begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__platon__callback__TransactionCallback__signTransaction2_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__callback__TransactionCallback__signTransaction2_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__callback__TransactionCallback__signTransaction2_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_transparams);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::platon::callback::TransactionCallback::__begin_signTransaction2(const ::platon::callback::TransactionParams& __p_transparams, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::platon::callback::TransactionCallbackPrx __proxy = ::platon::callback::TransactionCallbackPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_signTransaction2(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_signTransaction2(__p_transparams, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::platon::callback::TransactionCallback::end_signTransaction2(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __platon__callback__TransactionCallback__signTransaction2_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::platon::callback::TransactionCallback::ice_staticId()
{
    return ::platon::callback::TransactionCallback::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::platon::callback::TransactionCallback::__newInstance() const
{
    return new TransactionCallback;
}
::IceProxy::Ice::Object* ::IceProxy::platon::callback::upCast(::IceProxy::platon::callback::NodeCallback* p) { return p; }

void
::IceProxy::platon::callback::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::platon::callback::NodeCallback>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::platon::callback::NodeCallback;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::platon::callback::NodeCallback::invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __platon__callback__NodeCallback__invite_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskid);
        __os->write(__p_status);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::platon::callback::NodeCallback::begin_invite(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__callback__NodeCallback__invite_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__callback__NodeCallback__invite_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskid);
        __os->write(__p_status);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::platon::callback::NodeCallback::end_invite(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __platon__callback__NodeCallback__invite_name);
}

void
IceProxy::platon::callback::NodeCallback::notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __platon__callback__NodeCallback__notify_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskid);
        __os->write(__p_status);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::platon::callback::NodeCallback::begin_notify(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__callback__NodeCallback__notify_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__callback__NodeCallback__notify_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskid);
        __os->write(__p_status);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::platon::callback::NodeCallback::end_notify(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __platon__callback__NodeCallback__notify_name);
}

void
IceProxy::platon::callback::NodeCallback::ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __platon__callback__NodeCallback__ready_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskid);
        __os->write(__p_status);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::platon::callback::NodeCallback::begin_ready(const ::std::string& __p_taskid, ::Ice::Int __p_status, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__callback__NodeCallback__ready_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__callback__NodeCallback__ready_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskid);
        __os->write(__p_status);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::platon::callback::NodeCallback::end_ready(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __platon__callback__NodeCallback__ready_name);
}

const ::std::string&
IceProxy::platon::callback::NodeCallback::ice_staticId()
{
    return ::platon::callback::NodeCallback::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::platon::callback::NodeCallback::__newInstance() const
{
    return new NodeCallback;
}
::IceProxy::Ice::Object* ::IceProxy::platon::service::upCast(::IceProxy::platon::service::TaskSession* p) { return p; }

void
::IceProxy::platon::service::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::platon::service::TaskSession>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::platon::service::TaskSession;
        v->__copyFrom(proxy);
    }
}

::platon::ErrorEnum
IceProxy::platon::service::TaskSession::registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__platon__service__TaskSession__registTransactionCallback_name);
    ::IceInternal::Outgoing __og(this, __platon__service__TaskSession__registTransactionCallback_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_user_address);
        __os->write(__p_cb);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::platon::ErrorEnum __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::platon::service::TaskSession::begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__platon__service__TaskSession__registTransactionCallback_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__service__TaskSession__registTransactionCallback_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__service__TaskSession__registTransactionCallback_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_user_address);
        __os->write(__p_cb);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::platon::service::TaskSession::__begin_registTransactionCallback(const ::std::string& __p_user_address, const ::platon::callback::TransactionCallbackPrx& __p_cb, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::platon::ErrorEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::platon::ErrorEnum)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::platon::service::TaskSessionPrx __proxy = ::platon::service::TaskSessionPrx::uncheckedCast(__result->getProxy());
            ::platon::ErrorEnum __ret;
            try
            {
                __ret = __proxy->end_registTransactionCallback(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::platon::ErrorEnum)> _response;
    };
    return begin_registTransactionCallback(__p_user_address, __p_cb, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::platon::ErrorEnum
IceProxy::platon::service::TaskSession::end_registTransactionCallback(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __platon__service__TaskSession__registTransactionCallback_name);
    ::platon::ErrorEnum __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::platon::ErrorEnum
IceProxy::platon::service::TaskSession::registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__platon__service__TaskSession__registerIR_name);
    ::IceInternal::Outgoing __og(this, __platon__service__TaskSession__registerIR_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ir_hash);
        __os->write(__p_cb);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::platon::ErrorEnum __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::platon::service::TaskSession::begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__platon__service__TaskSession__registerIR_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__service__TaskSession__registerIR_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__service__TaskSession__registerIR_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ir_hash);
        __os->write(__p_cb);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::platon::service::TaskSession::__begin_registerIR(const ::std::string& __p_ir_hash, const ::platon::callback::TaskCallbackPrx& __p_cb, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::platon::ErrorEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::platon::ErrorEnum)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::platon::service::TaskSessionPrx __proxy = ::platon::service::TaskSessionPrx::uncheckedCast(__result->getProxy());
            ::platon::ErrorEnum __ret;
            try
            {
                __ret = __proxy->end_registerIR(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::platon::ErrorEnum)> _response;
    };
    return begin_registerIR(__p_ir_hash, __p_cb, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::platon::ErrorEnum
IceProxy::platon::service::TaskSession::end_registerIR(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __platon__service__TaskSession__registerIR_name);
    ::platon::ErrorEnum __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::platon::service::TaskSession::ice_staticId()
{
    return ::platon::service::TaskSession::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::platon::service::TaskSession::__newInstance() const
{
    return new TaskSession;
}
::IceProxy::Ice::Object* ::IceProxy::platon::service::upCast(::IceProxy::platon::service::NodeChannelSession* p) { return p; }

void
::IceProxy::platon::service::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::platon::service::NodeChannelSession>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::platon::service::NodeChannelSession;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::platon::service::NodeChannelSession::invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __platon__service__NodeChannelSession__invite_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskparams);
        __os->write(__p_cb);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::platon::service::NodeChannelSession::begin_invite(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__service__NodeChannelSession__invite_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__service__NodeChannelSession__invite_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskparams);
        __os->write(__p_cb);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::platon::service::NodeChannelSession::end_invite(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __platon__service__NodeChannelSession__invite_name);
}

void
IceProxy::platon::service::NodeChannelSession::notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __platon__service__NodeChannelSession__notify_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskparams);
        __os->write(__p_cb);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::platon::service::NodeChannelSession::begin_notify(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__service__NodeChannelSession__notify_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__service__NodeChannelSession__notify_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskparams);
        __os->write(__p_cb);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::platon::service::NodeChannelSession::end_notify(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __platon__service__NodeChannelSession__notify_name);
}

::Ice::Int
IceProxy::platon::service::NodeChannelSession::invite2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__platon__service__NodeChannelSession__invite2_name);
    ::IceInternal::Outgoing __og(this, __platon__service__NodeChannelSession__invite2_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskparams);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::platon::service::NodeChannelSession::begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__platon__service__NodeChannelSession__invite2_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__service__NodeChannelSession__invite2_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__service__NodeChannelSession__invite2_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskparams);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::platon::service::NodeChannelSession::__begin_invite2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::platon::service::NodeChannelSessionPrx __proxy = ::platon::service::NodeChannelSessionPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_invite2(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_invite2(__p_taskparams, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::platon::service::NodeChannelSession::end_invite2(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __platon__service__NodeChannelSession__invite2_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::platon::service::NodeChannelSession::notify2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__platon__service__NodeChannelSession__notify2_name);
    ::IceInternal::Outgoing __og(this, __platon__service__NodeChannelSession__notify2_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskparams);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::platon::service::NodeChannelSession::begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__platon__service__NodeChannelSession__notify2_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__service__NodeChannelSession__notify2_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__service__NodeChannelSession__notify2_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskparams);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::platon::service::NodeChannelSession::__begin_notify2(const ::platon::service::TaskParams& __p_taskparams, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::platon::service::NodeChannelSessionPrx __proxy = ::platon::service::NodeChannelSessionPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_notify2(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_notify2(__p_taskparams, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::platon::service::NodeChannelSession::end_notify2(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __platon__service__NodeChannelSession__notify2_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::platon::service::NodeChannelSession::ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __platon__service__NodeChannelSession__ready_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskparams);
        __os->write(__p_cb);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::platon::service::NodeChannelSession::begin_ready(const ::platon::service::TaskParams& __p_taskparams, const ::platon::callback::NodeCallbackPrx& __p_cb, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__service__NodeChannelSession__ready_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__service__NodeChannelSession__ready_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskparams);
        __os->write(__p_cb);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::platon::service::NodeChannelSession::end_ready(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __platon__service__NodeChannelSession__ready_name);
}

void
IceProxy::platon::service::NodeChannelSession::inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __platon__service__NodeChannelSession__inputData_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskId);
        __os->write(__p_fromUser);
        __os->write(__p_data);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::platon::service::NodeChannelSession::begin_inputData(const ::std::string& __p_taskId, const ::std::string& __p_fromUser, const ::platon::ByteList& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__service__NodeChannelSession__inputData_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__service__NodeChannelSession__inputData_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskId);
        __os->write(__p_fromUser);
        __os->write(__p_data);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::platon::service::NodeChannelSession::end_inputData(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __platon__service__NodeChannelSession__inputData_name);
}

void
IceProxy::platon::service::NodeChannelSession::input(const ::platon::ByteList& __p_data, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __platon__service__NodeChannelSession__input_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_data);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::platon::service::NodeChannelSession::begin_input(const ::platon::ByteList& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__service__NodeChannelSession__input_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__service__NodeChannelSession__input_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_data);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::platon::service::NodeChannelSession::end_input(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __platon__service__NodeChannelSession__input_name);
}

void
IceProxy::platon::service::NodeChannelSession::error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __platon__service__NodeChannelSession__error_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskId);
        __os->write(__p_role);
        __os->write(__p_from);
        __os->write(__p_error);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::platon::service::NodeChannelSession::begin_error(const ::std::string& __p_taskId, ::platon::MPCRole __p_role, const ::std::string& __p_from, ::platon::ErrorEnum __p_error, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __platon__service__NodeChannelSession__error_name, __del, __cookie);
    try
    {
        __result->prepare(__platon__service__NodeChannelSession__error_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_taskId);
        __os->write(__p_role);
        __os->write(__p_from);
        __os->write(__p_error);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::platon::service::NodeChannelSession::end_error(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __platon__service__NodeChannelSession__error_name);
}

const ::std::string&
IceProxy::platon::service::NodeChannelSession::ice_staticId()
{
    return ::platon::service::NodeChannelSession::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::platon::service::NodeChannelSession::__newInstance() const
{
    return new NodeChannelSession;
}

::Ice::Object* platon::callback::upCast(::platon::callback::TaskCallback* p) { return p; }

namespace
{
const ::std::string __platon__callback__TaskCallback_ids[2] =
{
    "::Ice::Object",
    "::platon::callback::TaskCallback"
};

}

bool
platon::callback::TaskCallback::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__platon__callback__TaskCallback_ids, __platon__callback__TaskCallback_ids + 2, _s);
}

::std::vector< ::std::string>
platon::callback::TaskCallback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__platon__callback__TaskCallback_ids[0], &__platon__callback__TaskCallback_ids[2]);
}

const ::std::string&
platon::callback::TaskCallback::ice_id(const ::Ice::Current&) const
{
    return __platon__callback__TaskCallback_ids[1];
}

const ::std::string&
platon::callback::TaskCallback::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::platon::callback::TaskCallback";
    return typeId;
#else
    return __platon__callback__TaskCallback_ids[1];
#endif
}

::Ice::DispatchStatus
platon::callback::TaskCallback::___error(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::platon::callback::MpcRequest __p_request;
    ::platon::ErrorEnum __p_error;
    __is->read(__p_request);
    __is->read(__p_error);
    __inS.endReadParams();
    error(__p_request, __p_error, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::callback::TaskCallback::___inputData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::platon::callback::MpcRequest __p_request;
    __is->read(__p_request);
    __inS.endReadParams();
    ::platon::ByteList __p_data;
    ::platon::ByteList __p_data_default;
    ::platon::ErrorEnum __ret = inputData(__p_request, __p_data, __p_data_default, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_data);
    __os->write(__p_data_default);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::callback::TaskCallback::___result(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::platon::callback::MpcRequest __p_request;
    ::platon::ByteList __p_data;
    __is->read(__p_request);
    __is->read(__p_data);
    __inS.endReadParams();
    result(__p_request, __p_data, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __platon__callback__TaskCallback_all[] =
{
    "error",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "inputData",
    "result"
};

}

::Ice::DispatchStatus
platon::callback::TaskCallback::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__platon__callback__TaskCallback_all, __platon__callback__TaskCallback_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __platon__callback__TaskCallback_all)
    {
        case 0:
        {
            return ___error(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___inputData(in, current);
        }
        case 6:
        {
            return ___result(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
platon::callback::TaskCallback::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
platon::callback::TaskCallback::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
platon::callback::__patch(TaskCallbackPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::platon::callback::TaskCallbackPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::platon::callback::TaskCallback::ice_staticId(), v);
    }
}

::Ice::Object* platon::callback::upCast(::platon::callback::TransactionCallback* p) { return p; }

namespace
{
const ::std::string __platon__callback__TransactionCallback_ids[2] =
{
    "::Ice::Object",
    "::platon::callback::TransactionCallback"
};

}

bool
platon::callback::TransactionCallback::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__platon__callback__TransactionCallback_ids, __platon__callback__TransactionCallback_ids + 2, _s);
}

::std::vector< ::std::string>
platon::callback::TransactionCallback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__platon__callback__TransactionCallback_ids[0], &__platon__callback__TransactionCallback_ids[2]);
}

const ::std::string&
platon::callback::TransactionCallback::ice_id(const ::Ice::Current&) const
{
    return __platon__callback__TransactionCallback_ids[1];
}

const ::std::string&
platon::callback::TransactionCallback::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::platon::callback::TransactionCallback";
    return typeId;
#else
    return __platon__callback__TransactionCallback_ids[1];
#endif
}

::Ice::DispatchStatus
platon::callback::TransactionCallback::___signTransaction(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_transaction;
    __is->read(__p_transaction);
    __inS.endReadParams();
    ::std::string __ret = signTransaction(__p_transaction, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::callback::TransactionCallback::___signTransaction2(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::platon::callback::TransactionParams __p_transparams;
    __is->read(__p_transparams);
    __inS.endReadParams();
    ::std::string __ret = signTransaction2(__p_transparams, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __platon__callback__TransactionCallback_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "signTransaction",
    "signTransaction2"
};

}

::Ice::DispatchStatus
platon::callback::TransactionCallback::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__platon__callback__TransactionCallback_all, __platon__callback__TransactionCallback_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __platon__callback__TransactionCallback_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___signTransaction(in, current);
        }
        case 5:
        {
            return ___signTransaction2(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
platon::callback::TransactionCallback::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
platon::callback::TransactionCallback::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
platon::callback::__patch(TransactionCallbackPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::platon::callback::TransactionCallbackPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::platon::callback::TransactionCallback::ice_staticId(), v);
    }
}

::Ice::Object* platon::callback::upCast(::platon::callback::NodeCallback* p) { return p; }

namespace
{
const ::std::string __platon__callback__NodeCallback_ids[2] =
{
    "::Ice::Object",
    "::platon::callback::NodeCallback"
};

}

bool
platon::callback::NodeCallback::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__platon__callback__NodeCallback_ids, __platon__callback__NodeCallback_ids + 2, _s);
}

::std::vector< ::std::string>
platon::callback::NodeCallback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__platon__callback__NodeCallback_ids[0], &__platon__callback__NodeCallback_ids[2]);
}

const ::std::string&
platon::callback::NodeCallback::ice_id(const ::Ice::Current&) const
{
    return __platon__callback__NodeCallback_ids[1];
}

const ::std::string&
platon::callback::NodeCallback::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::platon::callback::NodeCallback";
    return typeId;
#else
    return __platon__callback__NodeCallback_ids[1];
#endif
}

::Ice::DispatchStatus
platon::callback::NodeCallback::___invite(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_taskid;
    ::Ice::Int __p_status;
    __is->read(__p_taskid);
    __is->read(__p_status);
    __inS.endReadParams();
    invite(__p_taskid, __p_status, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::callback::NodeCallback::___notify(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_taskid;
    ::Ice::Int __p_status;
    __is->read(__p_taskid);
    __is->read(__p_status);
    __inS.endReadParams();
    notify(__p_taskid, __p_status, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::callback::NodeCallback::___ready(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_taskid;
    ::Ice::Int __p_status;
    __is->read(__p_taskid);
    __is->read(__p_status);
    __inS.endReadParams();
    ready(__p_taskid, __p_status, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __platon__callback__NodeCallback_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "invite",
    "notify",
    "ready"
};

}

::Ice::DispatchStatus
platon::callback::NodeCallback::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__platon__callback__NodeCallback_all, __platon__callback__NodeCallback_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __platon__callback__NodeCallback_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___invite(in, current);
        }
        case 5:
        {
            return ___notify(in, current);
        }
        case 6:
        {
            return ___ready(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
platon::callback::NodeCallback::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
platon::callback::NodeCallback::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
platon::callback::__patch(NodeCallbackPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::platon::callback::NodeCallbackPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::platon::callback::NodeCallback::ice_staticId(), v);
    }
}

::Ice::Object* platon::service::upCast(::platon::service::TaskSession* p) { return p; }

namespace
{
const ::std::string __platon__service__TaskSession_ids[2] =
{
    "::Ice::Object",
    "::platon::service::TaskSession"
};

}

bool
platon::service::TaskSession::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__platon__service__TaskSession_ids, __platon__service__TaskSession_ids + 2, _s);
}

::std::vector< ::std::string>
platon::service::TaskSession::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__platon__service__TaskSession_ids[0], &__platon__service__TaskSession_ids[2]);
}

const ::std::string&
platon::service::TaskSession::ice_id(const ::Ice::Current&) const
{
    return __platon__service__TaskSession_ids[1];
}

const ::std::string&
platon::service::TaskSession::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::platon::service::TaskSession";
    return typeId;
#else
    return __platon__service__TaskSession_ids[1];
#endif
}

::Ice::DispatchStatus
platon::service::TaskSession::___registTransactionCallback(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_user_address;
    ::platon::callback::TransactionCallbackPrx __p_cb;
    __is->read(__p_user_address);
    __is->read(__p_cb);
    __inS.endReadParams();
    ::platon::ErrorEnum __ret = registTransactionCallback(__p_user_address, __p_cb, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::service::TaskSession::___registerIR(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_ir_hash;
    ::platon::callback::TaskCallbackPrx __p_cb;
    __is->read(__p_ir_hash);
    __is->read(__p_cb);
    __inS.endReadParams();
    ::platon::ErrorEnum __ret = registerIR(__p_ir_hash, __p_cb, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __platon__service__TaskSession_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registTransactionCallback",
    "registerIR"
};

}

::Ice::DispatchStatus
platon::service::TaskSession::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__platon__service__TaskSession_all, __platon__service__TaskSession_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __platon__service__TaskSession_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___registTransactionCallback(in, current);
        }
        case 5:
        {
            return ___registerIR(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
platon::service::TaskSession::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
platon::service::TaskSession::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
platon::service::__patch(TaskSessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::platon::service::TaskSessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::platon::service::TaskSession::ice_staticId(), v);
    }
}

::Ice::Object* platon::service::upCast(::platon::service::NodeChannelSession* p) { return p; }

namespace
{
const ::std::string __platon__service__NodeChannelSession_ids[2] =
{
    "::Ice::Object",
    "::platon::service::NodeChannelSession"
};

}

bool
platon::service::NodeChannelSession::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__platon__service__NodeChannelSession_ids, __platon__service__NodeChannelSession_ids + 2, _s);
}

::std::vector< ::std::string>
platon::service::NodeChannelSession::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__platon__service__NodeChannelSession_ids[0], &__platon__service__NodeChannelSession_ids[2]);
}

const ::std::string&
platon::service::NodeChannelSession::ice_id(const ::Ice::Current&) const
{
    return __platon__service__NodeChannelSession_ids[1];
}

const ::std::string&
platon::service::NodeChannelSession::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::platon::service::NodeChannelSession";
    return typeId;
#else
    return __platon__service__NodeChannelSession_ids[1];
#endif
}

::Ice::DispatchStatus
platon::service::NodeChannelSession::___invite(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::platon::service::TaskParams __p_taskparams;
    ::platon::callback::NodeCallbackPrx __p_cb;
    __is->read(__p_taskparams);
    __is->read(__p_cb);
    __inS.endReadParams();
    invite(__p_taskparams, __p_cb, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::service::NodeChannelSession::___notify(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::platon::service::TaskParams __p_taskparams;
    ::platon::callback::NodeCallbackPrx __p_cb;
    __is->read(__p_taskparams);
    __is->read(__p_cb);
    __inS.endReadParams();
    notify(__p_taskparams, __p_cb, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::service::NodeChannelSession::___invite2(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::platon::service::TaskParams __p_taskparams;
    __is->read(__p_taskparams);
    __inS.endReadParams();
    ::Ice::Int __ret = invite2(__p_taskparams, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::service::NodeChannelSession::___notify2(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::platon::service::TaskParams __p_taskparams;
    __is->read(__p_taskparams);
    __inS.endReadParams();
    ::Ice::Int __ret = notify2(__p_taskparams, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::service::NodeChannelSession::___ready(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::platon::service::TaskParams __p_taskparams;
    ::platon::callback::NodeCallbackPrx __p_cb;
    __is->read(__p_taskparams);
    __is->read(__p_cb);
    __inS.endReadParams();
    ready(__p_taskparams, __p_cb, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::service::NodeChannelSession::___inputData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_taskId;
    ::std::string __p_fromUser;
    ::platon::ByteList __p_data;
    __is->read(__p_taskId);
    __is->read(__p_fromUser);
    __is->read(__p_data);
    __inS.endReadParams();
    inputData(__p_taskId, __p_fromUser, __p_data, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::service::NodeChannelSession::___input(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::platon::ByteList __p_data;
    __is->read(__p_data);
    __inS.endReadParams();
    input(__p_data, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
platon::service::NodeChannelSession::___error(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_taskId;
    ::platon::MPCRole __p_role;
    ::std::string __p_from;
    ::platon::ErrorEnum __p_error;
    __is->read(__p_taskId);
    __is->read(__p_role);
    __is->read(__p_from);
    __is->read(__p_error);
    __inS.endReadParams();
    error(__p_taskId, __p_role, __p_from, __p_error, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __platon__service__NodeChannelSession_all[] =
{
    "error",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "input",
    "inputData",
    "invite",
    "invite2",
    "notify",
    "notify2",
    "ready"
};

}

::Ice::DispatchStatus
platon::service::NodeChannelSession::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__platon__service__NodeChannelSession_all, __platon__service__NodeChannelSession_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __platon__service__NodeChannelSession_all)
    {
        case 0:
        {
            return ___error(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___input(in, current);
        }
        case 6:
        {
            return ___inputData(in, current);
        }
        case 7:
        {
            return ___invite(in, current);
        }
        case 8:
        {
            return ___invite2(in, current);
        }
        case 9:
        {
            return ___notify(in, current);
        }
        case 10:
        {
            return ___notify2(in, current);
        }
        case 11:
        {
            return ___ready(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
platon::service::NodeChannelSession::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
platon::service::NodeChannelSession::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
platon::service::__patch(NodeChannelSessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::platon::service::NodeChannelSessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::platon::service::NodeChannelSession::ice_staticId(), v);
    }
}
